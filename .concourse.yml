resource_types:
- name: pull-request
  type: registry-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: git-clone-resource
  type: git
  source:
    branch: master
    uri: https://github.com/drahnr/cargo-spellcheck.git

- name: github-release
  type: github-release
  source:
    owner: drahnr
    access_token: ((sirmergealot-github-token))
    repository:  cargo-spellcheck

- name: git-tag-resource
  type: git
  source:
    tag_filter: "v[0-9]*"
    branch: master
    uri: https://github.com/drahnr/cargo-spellcheck.git

- name: git-pull-request-resource
  type: pull-request
  source:
    repository: drahnr/cargo-spellcheck
    access_token: ((sirmergealot-github-token))


- name: env-glibc
  type: registry-image
  source:
    repository: quay.io/drahnr/rust-glibc-builder

jobs:
  - name: pr-validate
    build_logs_to_retain: 10
    public: true
    serial: true
    plan:
    - get: git-pull-request-resource
      resource: git-pull-request-resource
      version: every
      trigger: true

    - get: env-glibc

    - in_parallel:
      - put: git-pull-request-resource
        params:
          path: git-pull-request-resource
          context: meta-check
          status: pending
      - put: git-pull-request-resource
        params:
          path: git-pull-request-resource
          context: compile
          status: pending
      - put: git-pull-request-resource
        params:
          path: git-pull-request-resource
          context: run-check
          status: pending

    - in_parallel:
      - task: validate-glibc
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-pull-request-resource
          run:
            # user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown $(whoami): -Rf ${CARGO_HOME} .
              rustc +stable --version --verbose
              cargo +stable b
              cargo +stable t
            dir: git-pull-request-resource
          caches:
          - path: cargo

        on_success:
          put: git-pull-request-resource
          params:
            path: git-pull-request-resource
            context: compile
            status: success
        on_failure:
          put: git-pull-request-resource
          params:
            path: git-pull-request-resource
            context: compile
            status: failure

      - task: format-check
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-pull-request-resource
          run:
            # user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown $(whoami): -Rf ${CARGO_HOME} .
              rustc +stable --version --verbose
              rustup component add rustfmt
              cargo +stable fmt -- --check
            dir: git-pull-request-resource
          caches:
          - path: cargo

        on_success:
          put: git-pull-request-resource
          params:
            path: git-pull-request-resource
            context: meta-check
            status: success

        on_failure:
          put: git-pull-request-resource
          params:
            path: git-pull-request-resource
            context: meta-check
            status: failure

      - task: run-check
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-pull-request-resource
          run:
            # user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown $(whoami): -Rf ${CARGO_HOME} .
              cargo +stable run -- --version
              cargo +stable run -- spellcheck demo/Cargo.toml || echo "$? - Found some errors"
              cargo +stable run -- spellcheck demo/src/main.rs || echo "$? - Found some errors"
              cargo +stable run -- spellcheck demo/ || echo "$? - Found some errors"
            dir: git-pull-request-resource
          caches:
          - path: cargo

        on_success:
          put: git-pull-request-resource
          params:
            path: git-pull-request-resource
            context: run-check
            status: success

        on_failure:
          put: git-pull-request-resource
          params:
            path: git-pull-request-resource
            context: run-check
            status: failure

  - name: master-validate
    build_logs_to_retain: 10
    public: true
    serial: true
    plan:
    - get: env-glibc
    - get: git-repo
      resource: git-clone-resource
      trigger: true

    - in_parallel:
      - task: validate-compile
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          run:
            # user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown $(whoami): -Rf ${CARGO_HOME} .
              rustc +stable --version --verbose
              cargo +stable b
              cargo +stable t
            dir: git-repo
          caches:
          - path: cargo

      - task: validate-meta
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          run:
            # user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown $(whoami): -Rf ${CARGO_HOME} .
              rustc +stable --version --verbose
              cargo +stable fmt -- --check
              cargo spellcheck check && echo "Actually no spelling mistakes found!" || echo "Well, just testdrive anyways"
            dir: git-repo
          caches:
          - path: cargo

      - task: just-run
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          run:
            # user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown $(whoami): -Rf ${CARGO_HOME} .
              cargo +stable run -- --version
              cargo +stable run -- spellcheck demo/Cargo.toml || echo "$?"
              cargo +stable run -- spellcheck demo/src/main.rs || echo "$?"
              cargo +stable run -- spellcheck demo/ || echo "$?"
            dir: git-repo
          caches:
          - path: cargo


  - name: publish-github-release
    build_logs_to_retain: 5
    public: false
    serial: true
    plan:
    - get: env-glibc
    - get: git-repo
      resource: git-tag-resource
      trigger: true

    - task: create-github-release
      timeout: 15m
      image: env-glibc
      config:
        platform: linux
        inputs:
        - name: git-repo
        outputs:
        - name: release-info
        caches:
        - path: cargo
        run:
          path: sh
          args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown $(whoami): -Rf ${CARGO_HOME} .


              export RI_BASE_DIR="../release-info"
              export RI_ARTIFACTS_DIR="${RI_BASE_DIR}/artifacts"
              export RI_TAG_FILE="${RI_BASE_DIR}/TAG"
              export RI_COMMITISH_FILE="${RI_BASE_DIR}/COMMITISH"
              export RI_NAME_FILE="${RI_BASE_DIR}/NAME"

              sudo install -o $(whoami) -d "${RI_BASE_DIR}" || echo "failed to create dir"
              sudo install -o $(whoami) -d "${RI_ARTIFACTS_DIR}" || echo "failed to create dir"


              git rev-parse HEAD > "${RI_COMMITISH_FILE}"
              #git log -n 1 --format="%h" HEAD > "../${RI_COMMITISH_FILE}"
              cat "${RI_COMMITISH_FILE}"

              # the v-prefixed version
              cat ./.git/ref > "${RI_TAG_FILE}"
              cat "${RI_TAG_FILE}"

              # construct cargo-spellcheck-v1.2.3
              echo "cargo-spellcheck-$(cat ./.git/ref)" > "${RI_NAME_FILE}"
              cat "${RI_NAME_FILE}"

              # TODO cross compile to windows
              # $ cargo build --release --target x86_64-pc-windows-gnu
              # using the fedora provided precompiled static libs
              # and publish target/x86_64-pc-windows-gnu/release/cargo-spellcheck.exe
              # TODO build for more OSes, such as fuchsia and BSD platforms

              for TARGET in x86_64-unknown-linux-gnu ; do
                echo "Prepping ${TARGET} ..."
                cargo build --release --target "${TARGET}" && \
                cp -vf "target/${TARGET}/release/cargo-spellcheck" "${RI_ARTIFACTS_DIR}/cargo-spellcheck-${TARGET}"
                echo "Prepped ${TARGET} ."
                echo ""
              done
          dir: git-repo

    - put: github-release
      params:
        name: release-info/NAME
        tag: release-info/TAG
        commitish: release-info/COMMITISH
        globs:
        - release-info/artifacts/*
